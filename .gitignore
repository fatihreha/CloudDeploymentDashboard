# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# Docker
.dockerignore

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
logs/
*.log

# Database
*.db
*.sqlite
*.sqlite3

# Node modules (if any)
node_modules/

# Mülakat Analiz Dosyası (Özel) - Bu proje hakkında detaylı bilgi
# Bu dosya projenin teknik mimarisini, kullanılan portları ve çalışma prensiplerini açıklar:
# 
# KULLANILAN PORTLAR:
# - 5000: Flask Dashboard (Ana uygulama)
# - 6379: Redis (Cache ve session storage)
# - 8080: Nginx (Reverse proxy - önceden 80'di)
# - 9090: Prometheus (Monitoring)
# - 3000: Grafana (Görselleştirme)
# - Supabase: Cloud Database (PostgreSQL tabanlı, remote)
#
# PROJE AMACI:
# Cloud deployment süreçlerini yönetmek ve izlemek için geliştirilmiş bir dashboard.
# Docker container'ları deploy etme, health check yapma, sistem metriklerini izleme.
# Supabase real-time features ile canlı veri güncellemeleri.
#
# NASIL ÇALIŞIR:
# - Flask backend API'ler sağlar
# - Supabase cloud database'de deployment bilgileri saklanır
# - Supabase Python client ile veritabanı işlemleri
# - Real-time subscriptions ve live updates
# - Redis cache ve real-time data için kullanılır
# - Prometheus sistem metriklerini toplar
# - Grafana görselleştirme sağlar
# - Nginx reverse proxy olarak çalışır
# - Socket.IO ile real-time frontend güncellemeleri
#
# SUPABASE KURULUMU:
# 1. .env dosyası oluştur (.env.example'dan kopyala)
# 2. SUPABASE_URL ve SUPABASE_SERVICE_KEY değerlerini güncelle
# 3. Supabase schema'sını uygula (supabase_schema.sql)
#
# ÖNEMLİ KOMUTLAR:
# - cp .env.example .env (Environment variables'ları ayarla)
# - python app.py (Flask app'i çalıştır - Supabase ile)
# - docker-compose up -d (Tüm servisleri başlat)
# - docker-compose --profile monitoring up -d (Monitoring ile birlikte)
# - curl http://localhost:5000/api/health-check (Health check)
# - curl http://localhost:5000/api/status (Sistem durumu)

# Interview and development files
INTERVIEW_*.md
DEMO_SCRIPT.md
TECHNICAL_QUESTIONS.md
*.msi
azure-simple-deploy.ps1
azure-container-deployment.ps1
#
# SUPABASE ENVIRONMENT VARIABLES:
# - SUPABASE_URL: Supabase project URL'i
# - SUPABASE_ANON_KEY: Public anon key
# - SUPABASE_SERVICE_KEY: Service role key (backend için)
#
.interview_analysis.md

# Temporary files
*.tmp
*.temp

# Backup files
*.bak
*.backup

# Local configuration
config.local.py
settings.local.py

# SSL certificates
*.pem
*.key
*.crt

# Secrets
secrets/
.secrets

# Cloud deployment configs
.render/
.fly/
.aws/

# Monitoring data
prometheus_data/
grafana_data/

# Container volumes
postgres_data/
redis_data/